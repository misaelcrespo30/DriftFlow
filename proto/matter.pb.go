// Code generated by protoc-gen-go. DO NOT EDIT.
// This is a minimal manually written stub for compilation without protoc.

package proto

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

type Matter struct {
	Id                        int64
	Description               string
	OpenDate                  string
	CloseDate                 string
	PendingDate               string
	LimitationDate            string
	IsBillable                bool
	IsLimitationDateSatisfied bool
	StatusId                  int64
	Rate                      float64
	PracticeAreaId            int64
	ClientId                  int64
	OriginatingAttorneyId     int64
	ResponsibleAttorneyId     int64
	IsDeleted                 bool
	MatterNumber              string
	Budget                    float64
	HasBudget                 bool
	Field1                    string
	Field2                    string
	Field3                    string
	DisplayName               string
	CreatedById               int64
	CreatedOn                 string
	ModifiedById              int64
	ModifiedOn                string
	CustomFields              string
	CustomFormVersion         int64
	RetainerFeeBillId         int64
	RetainerFeeFirstPayment   string
	RetainerFeeInitialAmount  float64
	RetainerFeeLastBilledDate string
	RetainerFeeMonthlyAmount  float64
	RetainerFeeUserId         int64
	FirmOfficeId              int64
	SubjectAreaId             int64
	IsHidden                  bool
	LawClerkId                int64
}

type ListMattersRequest struct{}

type ListMattersResponse struct {
	Matters []*Matter
}

type GetMatterRequest struct {
	Id int64
}

type CreateMatterRequest struct {
	Description               string
	OpenDate                  string
	CloseDate                 string
	PendingDate               string
	LimitationDate            string
	IsBillable                bool
	IsLimitationDateSatisfied bool
	StatusId                  int64
	Rate                      float64
	PracticeAreaId            int64
	ClientId                  int64
	OriginatingAttorneyId     int64
	ResponsibleAttorneyId     int64
	IsDeleted                 bool
	MatterNumber              string
	Budget                    float64
	HasBudget                 bool
	Field1                    string
	Field2                    string
	Field3                    string
	DisplayName               string
	CreatedById               int64
	CreatedOn                 string
	ModifiedById              int64
	ModifiedOn                string
	CustomFields              string
	CustomFormVersion         int64
	RetainerFeeBillId         int64
	RetainerFeeFirstPayment   string
	RetainerFeeInitialAmount  float64
	RetainerFeeLastBilledDate string
	RetainerFeeMonthlyAmount  float64
	RetainerFeeUserId         int64
	FirmOfficeId              int64
	SubjectAreaId             int64
	IsHidden                  bool
	LawClerkId                int64
}

type MatterServiceServer interface {
	ListMatters(context.Context, *ListMattersRequest) (*ListMattersResponse, error)
	GetMatter(context.Context, *GetMatterRequest) (*Matter, error)
	CreateMatter(context.Context, *CreateMatterRequest) (*Matter, error)
}

type UnimplementedMatterServiceServer struct{}

func (UnimplementedMatterServiceServer) ListMatters(context.Context, *ListMattersRequest) (*ListMattersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMatters not implemented")
}
func (UnimplementedMatterServiceServer) GetMatter(context.Context, *GetMatterRequest) (*Matter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatter not implemented")
}
func (UnimplementedMatterServiceServer) CreateMatter(context.Context, *CreateMatterRequest) (*Matter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMatter not implemented")
}

func RegisterMatterServiceServer(s *grpc.Server, srv MatterServiceServer) {
	s.RegisterService(&grpc.ServiceDesc{
		ServiceName: "matter.MatterService",
		HandlerType: (*MatterServiceServer)(nil),
		Methods: []grpc.MethodDesc{
			{
				MethodName: "ListMatters",
				Handler:    _MatterService_ListMatters_Handler,
			},
			{
				MethodName: "GetMatter",
				Handler:    _MatterService_GetMatter_Handler,
			},
			{
				MethodName: "CreateMatter",
				Handler:    _MatterService_CreateMatter_Handler,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "proto/matter.proto",
	}, srv)
}

func _MatterService_ListMatters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMattersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatterServiceServer).ListMatters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matter.MatterService/ListMatters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatterServiceServer).ListMatters(ctx, req.(*ListMattersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatterService_GetMatter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatterServiceServer).GetMatter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matter.MatterService/GetMatter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatterServiceServer).GetMatter(ctx, req.(*GetMatterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatterService_CreateMatter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMatterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatterServiceServer).CreateMatter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matter.MatterService/CreateMatter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatterServiceServer).CreateMatter(ctx, req.(*CreateMatterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

type MatterActivity struct {
	Id                int64
	UserId            int64
	MatterId          int64
	Date              string
	Description       string
	Rate              float64
	CreatedById       int64
	CreatedOn         string
	ModifiedById      int64
	ModifiedOn        string
	EventEntryId      int64
	MatterNoteId      int64
	TaskId            int64
	CategoryId        int64
	ActivityType      string
	Amount            float64
	Code              string
	MatterId1         int64
	BillId            int64
	Duration          int64
	StartedAt         string
	MatterFlatFeeCode string
	IsMain            bool
	Field1            string
	Field2            string
	Field3            string
	IsBillable        bool
	Charge            float64
	NoMatter          bool
}

type ListMatterActivitiesRequest struct{}

type ListMatterActivitiesResponse struct {
	MatterActivities []*MatterActivity
}

type GetMatterActivityRequest struct {
	Id int64
}

type CreateMatterActivityRequest struct {
	UserId            int64
	MatterId          int64
	Date              string
	Description       string
	Rate              float64
	CreatedById       int64
	CreatedOn         string
	ModifiedById      int64
	ModifiedOn        string
	EventEntryId      int64
	MatterNoteId      int64
	TaskId            int64
	CategoryId        int64
	ActivityType      string
	Amount            float64
	Code              string
	MatterId1         int64
	BillId            int64
	Duration          int64
	StartedAt         string
	MatterFlatFeeCode string
	IsMain            bool
	Field1            string
	Field2            string
	Field3            string
	IsBillable        bool
	Charge            float64
	NoMatter          bool
}

type MatterActivityServiceServer interface {
	ListMatterActivities(context.Context, *ListMatterActivitiesRequest) (*ListMatterActivitiesResponse, error)
	GetMatterActivity(context.Context, *GetMatterActivityRequest) (*MatterActivity, error)
	CreateMatterActivity(context.Context, *CreateMatterActivityRequest) (*MatterActivity, error)
}

type UnimplementedMatterActivityServiceServer struct{}

func (UnimplementedMatterActivityServiceServer) ListMatterActivities(context.Context, *ListMatterActivitiesRequest) (*ListMatterActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMatterActivities not implemented")
}
func (UnimplementedMatterActivityServiceServer) GetMatterActivity(context.Context, *GetMatterActivityRequest) (*MatterActivity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatterActivity not implemented")
}
func (UnimplementedMatterActivityServiceServer) CreateMatterActivity(context.Context, *CreateMatterActivityRequest) (*MatterActivity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMatterActivity not implemented")
}

func RegisterMatterActivityServiceServer(s *grpc.Server, srv MatterActivityServiceServer) {
	s.RegisterService(&grpc.ServiceDesc{
		ServiceName: "matter.MatterActivityService",
		HandlerType: (*MatterActivityServiceServer)(nil),
		Methods: []grpc.MethodDesc{
			{
				MethodName: "ListMatterActivities",
				Handler:    _MatterActivityService_ListMatterActivities_Handler,
			},
			{
				MethodName: "GetMatterActivity",
				Handler:    _MatterActivityService_GetMatterActivity_Handler,
			},
			{
				MethodName: "CreateMatterActivity",
				Handler:    _MatterActivityService_CreateMatterActivity_Handler,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "proto/matter.proto",
	}, srv)
}

func _MatterActivityService_ListMatterActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMatterActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatterActivityServiceServer).ListMatterActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matter.MatterActivityService/ListMatterActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatterActivityServiceServer).ListMatterActivities(ctx, req.(*ListMatterActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatterActivityService_GetMatterActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatterActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatterActivityServiceServer).GetMatterActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matter.MatterActivityService/GetMatterActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatterActivityServiceServer).GetMatterActivity(ctx, req.(*GetMatterActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatterActivityService_CreateMatterActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMatterActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatterActivityServiceServer).CreateMatterActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matter.MatterActivityService/CreateMatterActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatterActivityServiceServer).CreateMatterActivity(ctx, req.(*CreateMatterActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ----- MatterRelated definitions -----

type MatterRelated struct {
	Id            int64
	MatterId      int64
	ActivityLogId int64
}

type ListMatterRelatedRequest struct{}

type ListMatterRelatedResponse struct {
	MatterRelateds []*MatterRelated
}

type GetMatterRelatedRequest struct {
	Id int64
}

type CreateMatterRelatedRequest struct {
	MatterId      int64
	ActivityLogId int64
}

type MatterRelatedServiceServer interface {
	ListMatterRelated(context.Context, *ListMatterRelatedRequest) (*ListMatterRelatedResponse, error)
	GetMatterRelated(context.Context, *GetMatterRelatedRequest) (*MatterRelated, error)
	CreateMatterRelated(context.Context, *CreateMatterRelatedRequest) (*MatterRelated, error)
}

type UnimplementedMatterRelatedServiceServer struct{}

func (UnimplementedMatterRelatedServiceServer) ListMatterRelated(context.Context, *ListMatterRelatedRequest) (*ListMatterRelatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMatterRelated not implemented")
}
func (UnimplementedMatterRelatedServiceServer) GetMatterRelated(context.Context, *GetMatterRelatedRequest) (*MatterRelated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatterRelated not implemented")
}
func (UnimplementedMatterRelatedServiceServer) CreateMatterRelated(context.Context, *CreateMatterRelatedRequest) (*MatterRelated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMatterRelated not implemented")
}

func RegisterMatterRelatedServiceServer(s *grpc.Server, srv MatterRelatedServiceServer) {
	s.RegisterService(&grpc.ServiceDesc{
		ServiceName: "matter.MatterRelatedService",
		HandlerType: (*MatterRelatedServiceServer)(nil),
		Methods: []grpc.MethodDesc{
			{
				MethodName: "ListMatterRelated",
				Handler:    _MatterRelatedService_ListMatterRelated_Handler,
			},
			{
				MethodName: "GetMatterRelated",
				Handler:    _MatterRelatedService_GetMatterRelated_Handler,
			},
			{
				MethodName: "CreateMatterRelated",
				Handler:    _MatterRelatedService_CreateMatterRelated_Handler,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "proto/matter.proto",
	}, srv)
}

func _MatterRelatedService_ListMatterRelated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMatterRelatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatterRelatedServiceServer).ListMatterRelated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matter.MatterRelatedService/ListMatterRelated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatterRelatedServiceServer).ListMatterRelated(ctx, req.(*ListMatterRelatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatterRelatedService_GetMatterRelated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatterRelatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatterRelatedServiceServer).GetMatterRelated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matter.MatterRelatedService/GetMatterRelated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatterRelatedServiceServer).GetMatterRelated(ctx, req.(*GetMatterRelatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatterRelatedService_CreateMatterRelated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMatterRelatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatterRelatedServiceServer).CreateMatterRelated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matter.MatterRelatedService/CreateMatterRelated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatterRelatedServiceServer).CreateMatterRelated(ctx, req.(*CreateMatterRelatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ----- MatterStatus definitions -----

type MatterStatus struct {
	Id             int64
	Name           string
	IsSystem       bool
	IsNoteRequired bool
	Color          string
}

type ListMatterStatusesRequest struct{}

type ListMatterStatusesResponse struct {
	MatterStatuses []*MatterStatus
}

type GetMatterStatusRequest struct {
	Id int64
}

type CreateMatterStatusRequest struct {
	Name           string
	IsSystem       bool
	IsNoteRequired bool
	Color          string
}

type MatterStatusServiceServer interface {
	ListMatterStatuses(context.Context, *ListMatterStatusesRequest) (*ListMatterStatusesResponse, error)
	GetMatterStatus(context.Context, *GetMatterStatusRequest) (*MatterStatus, error)
	CreateMatterStatus(context.Context, *CreateMatterStatusRequest) (*MatterStatus, error)
}

type UnimplementedMatterStatusServiceServer struct{}

func (UnimplementedMatterStatusServiceServer) ListMatterStatuses(context.Context, *ListMatterStatusesRequest) (*ListMatterStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMatterStatuses not implemented")
}
func (UnimplementedMatterStatusServiceServer) GetMatterStatus(context.Context, *GetMatterStatusRequest) (*MatterStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatterStatus not implemented")
}
func (UnimplementedMatterStatusServiceServer) CreateMatterStatus(context.Context, *CreateMatterStatusRequest) (*MatterStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMatterStatus not implemented")
}

func RegisterMatterStatusServiceServer(s *grpc.Server, srv MatterStatusServiceServer) {
	s.RegisterService(&grpc.ServiceDesc{
		ServiceName: "matter.MatterStatusService",
		HandlerType: (*MatterStatusServiceServer)(nil),
		Methods: []grpc.MethodDesc{
			{
				MethodName: "ListMatterStatuses",
				Handler:    _MatterStatusService_ListMatterStatuses_Handler,
			},
			{
				MethodName: "GetMatterStatus",
				Handler:    _MatterStatusService_GetMatterStatus_Handler,
			},
			{
				MethodName: "CreateMatterStatus",
				Handler:    _MatterStatusService_CreateMatterStatus_Handler,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "proto/matter.proto",
	}, srv)
}

func _MatterStatusService_ListMatterStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMatterStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatterStatusServiceServer).ListMatterStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matter.MatterStatusService/ListMatterStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatterStatusServiceServer).ListMatterStatuses(ctx, req.(*ListMatterStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatterStatusService_GetMatterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatterStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatterStatusServiceServer).GetMatterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matter.MatterStatusService/GetMatterStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatterStatusServiceServer).GetMatterStatus(ctx, req.(*GetMatterStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatterStatusService_CreateMatterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMatterStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatterStatusServiceServer).CreateMatterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matter.MatterStatusService/CreateMatterStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatterStatusServiceServer).CreateMatterStatus(ctx, req.(*CreateMatterStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ----- MatterActivityCategory definitions -----

type MatterActivityCategory struct {
	Id                        int64
	Name                      string
	CreatedById               int64
	CreatedOn                 string
	Discriminator             string
	ModifiedById              int64
	ModifiedOn                string
	Rate                      float64
	BillingMethod             string
	CustomRate                float64
	MatterFlatFeeCategoryRate float64
	Field1                    string
	Field2                    string
	Field3                    string
}

type ListMatterActivityCategoriesRequest struct{}

type ListMatterActivityCategoriesResponse struct {
	MatterActivityCategories []*MatterActivityCategory
}

type GetMatterActivityCategoryRequest struct {
	Id int64
}



type CreateMatterActivityCategoryRequest struct {
	Name                      string
	CreatedById               int64
	CreatedOn                 string
	Discriminator             string
	ModifiedById              int64
	ModifiedOn                string
	Rate                      float64
	BillingMethod             string
	CustomRate                float64
	MatterFlatFeeCategoryRate float64
	Field1                    string
	Field2                    string
	Field3                    string
}

type MatterActivityCategoryServiceServer interface {
	ListMatterActivityCategories(context.Context, *ListMatterActivityCategoriesRequest) (*ListMatterActivityCategoriesResponse, error)
	GetMatterActivityCategory(context.Context, *GetMatterActivityCategoryRequest) (*MatterActivityCategory, error)
	CreateMatterActivityCategory(context.Context, *CreateMatterActivityCategoryRequest) (*MatterActivityCategory, error)
}

type UnimplementedMatterActivityCategoryServiceServer struct{}

func (UnimplementedMatterActivityCategoryServiceServer) ListMatterActivityCategories(context.Context, *ListMatterActivityCategoriesRequest) (*ListMatterActivityCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMatterActivityCategories not implemented")
}
func (UnimplementedMatterActivityCategoryServiceServer) GetMatterActivityCategory(context.Context, *GetMatterActivityCategoryRequest) (*MatterActivityCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatterActivityCategory not implemented")
}
func (UnimplementedMatterActivityCategoryServiceServer) CreateMatterActivityCategory(context.Context, *CreateMatterActivityCategoryRequest) (*MatterActivityCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMatterActivityCategory not implemented")
}

func RegisterMatterActivityCategoryServiceServer(s *grpc.Server, srv MatterActivityCategoryServiceServer) {
	s.RegisterService(&grpc.ServiceDesc{
		ServiceName: "matter.MatterActivityCategoryService",
		HandlerType: (*MatterActivityCategoryServiceServer)(nil),
		Methods: []grpc.MethodDesc{
			{
				MethodName: "ListMatterActivityCategories",
				Handler:    _MatterActivityCategoryService_ListMatterActivityCategories_Handler,
			},
			{
				MethodName: "GetMatterActivityCategory",
				Handler:    _MatterActivityCategoryService_GetMatterActivityCategory_Handler,
			},
			{
				MethodName: "CreateMatterActivityCategory",
				Handler:    _MatterActivityCategoryService_CreateMatterActivityCategory_Handler,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "proto/matter.proto",
	}, srv)
}

func _MatterActivityCategoryService_ListMatterActivityCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMatterActivityCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatterActivityCategoryServiceServer).ListMatterActivityCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matter.MatterActivityCategoryService/ListMatterActivityCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatterActivityCategoryServiceServer).ListMatterActivityCategories(ctx, req.(*ListMatterActivityCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatterActivityCategoryService_GetMatterActivityCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatterActivityCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatterActivityCategoryServiceServer).GetMatterActivityCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matter.MatterActivityCategoryService/GetMatterActivityCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatterActivityCategoryServiceServer).GetMatterActivityCategory(ctx, req.(*GetMatterActivityCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatterActivityCategoryService_CreateMatterActivityCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMatterActivityCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatterActivityCategoryServiceServer).CreateMatterActivityCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matter.MatterActivityCategoryService/CreateMatterActivityCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatterActivityCategoryServiceServer).CreateMatterActivityCategory(ctx, req.(*CreateMatterActivityCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}
